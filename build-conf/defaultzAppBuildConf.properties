#######################################################################
# Default application properties used by zappbuild
#
#  treated as global defaults, if not overridden by
#  settings in the /application-conf directory   

#
# dbb.scannerMapping to map file extensions to DBB dependency scanner configurations
#
#  this maps file extensions to the scanner configuration for the DBB dependency scanners
#
#  Schema
#  "scannerClass":"ScannerImplementation" : "languageHint":"DBBScannerHint"  :: comma separated list of file extensions
#
#  Be aware, that the DependencyScannerRegistry comes with a set of default scanner configurations, 
#   which are documented at:
#   https://www.ibm.com/docs/api/v1/content/SS6T76_2.0.0/javadoc/com/ibm/dbb/dependency/DependencyScannerRegistry.html
# 
#  If a file extension of a build file is not specified in the mapping,  
#   zAppBuild will skip scanning the file and only record a LogicalFile without capturing dependencies.
#    
# Default mappings (always present based on DependencyScannerRegistry)
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"BMS" :: bms, mac
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"COB" :: cbl,cpy,cob
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"C" :: c, h
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"ASM" :: asm, mac
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"CPP" :: cpp, hpp
dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"PLI" :: pli, inc
dbb.scannerMapping = "scannerClass":"ZUnitConfigScanner" :: bzucfg
# Custom mappings
#dbb.scannerMapping = "scannerClass":"DependencyScanner", "languageHint":"REXX" :: rexx


#
# Service URL for the Git provider to have a visual comparison of two hashes  
# Leveraged as a build result property <props.gitRepositoryURL>/compare/
# samples: GitHub : /compare/ ; GitLab :  /-/compare/
gitRepositoryCompareService=/-/compare/

#
# Determine the behavior when facing a scanner failure
# 'true' proceeds with the build and reports a warning 
# 'false' will terminate the build process (default)
continueOnScanFailure=true

#
# Flag to log output in table views instead of printing raw JSON data
# default = false
formatConsoleOutput=false

# createTestcaseDependency controls if a dependency should be set up between the testcase
# and the corresponding application program. If this property set to true, a dependency
# to the program is created for the testcase, which is then impacted by a change
# of the program. In this case, the testcase is recompiled everytime the program is modified.
# When set to false, the testcase is not impacted by the change of the program.
# Default: false
createTestcaseDependency=false

# generateDb2BindInfoRecord controls if zAppBuild generates a generic DBB build record for a build file
# to document the configured db2 bind options (application-conf/bind.properties) .
# This allows to pass the information into the packaging step and on to your deployment manager, like UCD.
# Implemented in Assembler.groovy, Cobol.groovy and PLI.groovy
# See also generateDb2BindInfoRecordProperties for the list of properties which are documented
# Default: false
generateDb2BindInfoRecord=false

# generateDb2BindInfoRecordProperties is a comma-separated list of existing bind parameters configured to zAppBuild.
# See application-conf/bind.properties for available properties.
generateDb2BindInfoRecordProperties=bind_collectionID,bind_packageOwner,bind_qualifier

#
# impactBuildOnBuildPropertyChanges controls if impact calculation should analyze
# build property changes for COBOL, PLI, ASM.
# default = false
impactBuildOnBuildPropertyChanges=false

#
# list of build property lists referencing which language properties should cause an impact build when the given property is changed
# properties need to be managed in property files within the application repository to detect the change; applies only to impact builds
# general pattern: langPrefix_impactPropertyList, optional: langPrefix_impactPropertyListCICS and langPrefix_impactPropertyListSQL
impactBuildOnBuildPropertyList=[${assembler_impactPropertyList},${assembler_impactPropertyListCICS},${assembler_impactPropertyListSQL},${bms_impactPropertyList},${cobol_impactPropertyList},${cobol_impactPropertyListCICS},${cobol_impactPropertyListSQL},${dbdgen_impactPropertyList},${linkedit_impactPropertyList},${mfs_impactPropertyList},${pli_impactPropertyList},${pli_impactPropertyListCICS},${pli_impactPropertyListSQL},${psbgen_impactPropertyList}]


# Set filter used to exclude certain information from the link edit scanning.
# The value contains a comma separated list of patterns.
# example: A filter of *.SUB1, *.SUB2 will exclude modules SUB1 and SUB2
#          from any dataset. To exclude member HELLO in PDS TEST.ASM will
#          be matched by the pattern TEST.ASM.HELLO. The pattern TEST.ASM.*
#          will match any member in the data set TEST.COBOL.
# The following filter excludes CICS and LE Library references.
dbb.LinkEditScanner.excludeFilter = ${SDFHLOAD}.*, ${SCEELKED}.*

#
# Flag to determine if the build framework should document deletions of outputs in DBB Build Report
# for build files being mapped to language scripts
#
# Default : false
documentDeleteRecords=false 

# exclude list used when scanning or running full or impact build
#excludeFileList=.*,**/.*,**/*.properties,**/*.xml,**/*.groovy,**/*.json,**/*.md,**/application-conf/*.*,**/*.jcl,**/var/*,**/*.rex,**/*.rexx
excludeFileList=.*,**/.*,**/*.properties,**/*.xml,**/*.groovy,**/*.json,**/*.md,**/application-conf/*.*,**/var/*


#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,languageConfigurationMapping.properties

#
# Comma separated list all source directories included in application build. Supports both absolute
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}


###############################################################
# Dependency Analysis and Impact Analysis configuration
###############################################################

#
# boolean flag to configure the SearchPathDependencyResolver to evaluate if resolved dependencies impact
#  the file flags isCICS, isSQL, isDLI, isMQ when creating the LogicalFile
#
#  default:false
resolveSubsystems=false

#
# SearchPathImpactFinder resolution searchPath configuration
#  list of multiple search path configurations which are defined below
#
# this configuration is used when running zAppBuild with the --impactBuild option
#  to calculate impacted files based on the identified changed files
impactSearch=${copybookSearch}${pliincludeSearch}${bmsSearch}${linkSearch}${rexxCopySearch}${zunitTestConfigSearch}${zunitTestcasePgmSearch}

#
# copybookSearch
# searchPath to locate Cobol copybooks
# used in dependency resolution and impact analysis
#
# Please be as specific as possible when configuring the searchPath.
# Alternate configurations:
#
# dependency resolution from multiple repositories / multiple root folders:
# copybookSearch = search:${workspace}/?path=**/copybook/*.cpy
#
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy:
# copybookSearch = search:${workspace}/?path=**/*.cpy
# dependency resolution across all directories in build workspace, but filtering on the file extension cpy and cobcpy:
#copybookSearch = search:${workspace}/?path=**/*.cpy;**/*.cobcpy
#
# dependency resolution in the application directory and a shared common copybook location:
# copybookSearch = search:${workspace}/?path=${application}/copybook/*.cpy;/u/build/common/copybooks/*.cpy
#
# More samples can be found along with the syntax for the search path configurations at:
# https://www.ibm.com/docs/en/dbb/2.0.0?topic=apis-dependency-impact-resolution#6-resolving-logical-build-dependencies-to-local-physical-files
#
#copybookSearch = search:${workspace}/?path=${application}/**/*.cpy;${workspace}/?path=credit-management-system/**/*.cpy;${workspace}/?path=security-subsystem/**/*.cpy;${workspace}/?path=database-utilities/**/*.cpy

#
# pliincludeSearch
# searchPath to locate PLI include files
# used in dependency resolution and impact analysis
pliincludeSearch = search:${workspace}/?path=${application}/plinc/*.cpy

# asmMacroSearch
# searchPath to locate Assembler macro files
# use category filters on what you want to include during the scan (i.e. excludes macro-def keyword)
# used in dependency resolution and impact analysis
asmMacroSearch = search:[SYSLIB:MACRO]${workspace}/?path=${application}/maclib/*.mac

# asmCopySearch
# searchPath to locate Assembler copy files
# used in dependency resolution and impact analysis
asmCopySearch = search:[SYSLIB:COPY]${workspace}/?path=${application}/maclib/*.mac

#
# bmsSearch
# searchPath to locate impacted bms maps
# used only in impact analysis
bmsSearch = search:${workspace}/?path=${application}/bms/*.bms

#
# rexxCopySearch
# searchPath to locate rexx copy - defaults to the local rexx folder in the main application folder
# used in dependency resolution and impact analysis
rexxCopySearch = search:[SYSLIB:COPY]${workspace}/?path=${application}/rexx/*.rexx

#
# linkSearch
#
# searchPath to locate impacted linkcards or main programs after an included submodule is changed
# leverages the output collection, which has the dependency info from the executable
# category LINK only; used only in impact analysis
#
# Additional samples:
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl:
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl
#
# impact resolution across all directories in build workspace, but filtering on the file extension cbl and pli (for cobol and pli submodules):
# staticLinkSearch = search:[:LINK]${workspace}/?path=**/*.cbl,**/*.pli
#
# More samples can be found along with the syntax for the search path configurations at:
# https://www.ibm.com/docs/en/dbb/2.0.0?topic=apis-dependency-impact-resolution#6-resolving-logical-build-dependencies-to-local-physical-files
#
# Special case with Dependency Scanner Transfer Control Statement capturing turned on (default is off)
# the scanners detect a static call to the literal, which would need to turn into a new rule for CALL:
# staticCallSearch = search:[:CALL]${workspace}/?path=${application}/cobol/*.cbl
#
linkSearch = search:[:LINK]${workspace}/?path=${application}/cobol/*.cbl

# zunitTestConfigSearch
# searchPath to locate zunit config files
# used in impact analysis
zunitTestConfigSearch = search:[:ZUNITINC]${workspace}/?path=${application}/cobol/*.cbl;${application}/pli/*.pli;${application}/testcase/*.cbl;${application}/testcase/*.pli

#
# zunitPlayfileSearch
# searchPath to locate zunit playback files
# used in dependency resolution
zunitPlayfileSearch = search:[SYSPLAY:]${workspace}/?path=${application}/testplayfiles/*.bzuplay

#
# zunitTestcasePgmSearch
# searchPath to locate impacted test case programs
# see also build-conf/build.properties -> createTestcaseDependency
# used in impact analysis
zunitTestcasePgmSearch = search:[SYSPROG:PROGRAMDEPENDENCY]${workspace}/?path=${application}/cobol/*.cbl;${application}/pli/*.pli


###############################################################
# Build Property management
###############################################################
# zAppBuild allows you to manage default properties and file properties:
# - Documentation on how to override corresponding default build properties can be found at:
#   https://github.com/IBM/dbb-zappbuild/docs/FilePropertyManagement.md

# ### Properties to enable and configure build property overrides using individual artifact properties files

# flag to enable the zAppBuild capability to load individual artifact properties files for all individual source files.
# Note: To only activate loadFileLevelProperties for a group of files, it is recommended to use DBB's file property path
# syntax in application-conf/file.properties instead.
# default: false
loadFileLevelProperties=false

# Property to enable/disable and configure build property overrides using language configuration mapping
# file - languageConfigurationMapping.properties
# If loadFileLevelProperties is set as true above, the properties from the individual artifact properties files will override the
# properties from language configuration properties file.
# Note: To only activate loadLanguageConfigurationProperties for a group of files, it is recommended to use DBB's file property path
# syntax in application-conf/file.properties instead.
loadLanguageConfigurationProperties=false

# relative path to folder containing individual artifact properties files
# assumed to be relative to ${workspace}/${application}
propertyFilePath=properties

# file extension for individual artifact properties files
# default: properties
propertyFileExtension=properties


# Build properties used by zAppBuild/build.groovy

#
# Run zUnit Tests
# Defaults to "false", to enable, set to "true"
#runzTests=true

#
# Comma separated list of additional application property files to load
# Supports both relative path (to ${application}/application-conf/) and absolute path
applicationPropFiles=file.properties,languageConfigurationMapping.properties

#
# Comma separated list all source directories included in application build. Supports both absolute
# and relative paths.  Relative assumed to be relative to ${workspace}.
# ex: applicationSrcDirs=${application},/u/build/common/copybooks
applicationSrcDirs=${application}

#
# Flag to log output in table views instead of printing raw JSON data
# See also build-conf/build.properties
# default = false
# formatConsoleOutput=false




#
# exclude list used when scanning or running full build
#excludeFileList=.*,**/.*,**/*.properties,**/*.xml,**/*.groovy,**/*.json,**/*.md,**/application-conf/*.*,**/*.jcl

#
# comma-separated list of file patterns for which impact calculation should be skipped. Uses glob file patterns
# sample: skipImpactCalculationList=**/epsmtout.cpy,**/centralCopybooks/*.cpy
skipImpactCalculationList=

#
# Job card, please use \n to indicate a line break and use \ to break the line in this property file
# Example: jobCard=//RUNZUNIT JOB ,MSGCLASS=H,CLASS=A,NOTIFY=&SYSUID,REGION=0M
jobCard=

